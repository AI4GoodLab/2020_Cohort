{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  currentValue: \"0\",\n  operator: null,\n  previousValue: null\n};\nexport var handleNumber = function handleNumber(value, state) {\n  if (state.currentValue === \"0\") {\n    return {\n      currentValue: \"\" + value\n    };\n  }\n\n  return {\n    currentValue: \"\" + state.currentValue + value\n  };\n};\nexport var handleEqual = function handleEqual(state) {\n  var currentValue = state.currentValue,\n      previousValue = state.previousValue,\n      operator = state.operator;\n  var current = parseFloat(currentValue);\n  var previous = parseFloat(previousValue);\n  var resetState = {\n    operator: null,\n    previousValue: null\n  };\n\n  if (operator === \"/\") {\n    return _objectSpread({\n      currentValue: previous / current\n    }, resetState);\n  }\n\n  if (operator === \"*\") {\n    return _objectSpread({\n      currentValue: previous * current\n    }, resetState);\n  }\n\n  if (operator === \"+\") {\n    return _objectSpread({\n      currentValue: previous + current\n    }, resetState);\n  }\n\n  if (operator === \"-\") {\n    return _objectSpread({\n      currentValue: previous - current\n    }, resetState);\n  }\n\n  return state;\n};\n\nvar calculator = function calculator(type, value, state) {\n  switch (type) {\n    case \"number\":\n      return handleNumber(value, state);\n\n    case \"operator\":\n      return {\n        operator: value,\n        previousValue: state.currentValue,\n        currentValue: \"0\"\n      };\n\n    case \"equal\":\n      return handleEqual(state);\n\n    case \"clear\":\n      return initialState;\n\n    case \"posneg\":\n      return {\n        currentValue: \"\" + parseFloat(state.currentValue) * -1\n      };\n\n    case \"percentage\":\n      return {\n        currentValue: \"\" + parseFloat(state.currentValue) * 0.01\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default calculator;","map":{"version":3,"sources":["C:/Users/jhuan/Documents/AI4Good/Project/hAIven/haiven-app/app/util/calculator.js"],"names":["initialState","currentValue","operator","previousValue","handleNumber","value","state","handleEqual","current","parseFloat","previous","resetState","calculator","type"],"mappings":";;;;;;AAAA,OAAO,IAAMA,YAAY,GAAG;AAC1BC,EAAAA,YAAY,EAAE,GADY;AAE1BC,EAAAA,QAAQ,EAAE,IAFgB;AAG1BC,EAAAA,aAAa,EAAE;AAHW,CAArB;AAMP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,KAAR,EAAkB;AAC5C,MAAIA,KAAK,CAACL,YAAN,KAAuB,GAA3B,EAAgC;AAC9B,WAAO;AAAEA,MAAAA,YAAY,OAAKI;AAAnB,KAAP;AACD;;AAED,SAAO;AACLJ,IAAAA,YAAY,OAAKK,KAAK,CAACL,YAAX,GAA0BI;AADjC,GAAP;AAGD,CARM;AAUP,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACD,KAAD,EAAW;AAAA,MAC5BL,YAD4B,GACcK,KADd,CAC5BL,YAD4B;AAAA,MACdE,aADc,GACcG,KADd,CACdH,aADc;AAAA,MACCD,QADD,GACcI,KADd,CACCJ,QADD;AAGpC,MAAMM,OAAO,GAAGC,UAAU,CAACR,YAAD,CAA1B;AACA,MAAMS,QAAQ,GAAGD,UAAU,CAACN,aAAD,CAA3B;AACA,MAAMQ,UAAU,GAAG;AACjBT,IAAAA,QAAQ,EAAE,IADO;AAEjBC,IAAAA,aAAa,EAAE;AAFE,GAAnB;;AAKA,MAAID,QAAQ,KAAK,GAAjB,EAAsB;AACpB;AACED,MAAAA,YAAY,EAAES,QAAQ,GAAGF;AAD3B,OAEKG,UAFL;AAID;;AAED,MAAIT,QAAQ,KAAK,GAAjB,EAAsB;AACpB;AACED,MAAAA,YAAY,EAAES,QAAQ,GAAGF;AAD3B,OAEKG,UAFL;AAID;;AAED,MAAIT,QAAQ,KAAK,GAAjB,EAAsB;AACpB;AACED,MAAAA,YAAY,EAAES,QAAQ,GAAGF;AAD3B,OAEKG,UAFL;AAID;;AAED,MAAIT,QAAQ,KAAK,GAAjB,EAAsB;AACpB;AACED,MAAAA,YAAY,EAAES,QAAQ,GAAGF;AAD3B,OAEKG,UAFL;AAID;;AAED,SAAOL,KAAP;AACD,CAvCM;;AAyCP,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOR,KAAP,EAAcC,KAAd,EAAwB;AACzC,UAAQO,IAAR;AACE,SAAK,QAAL;AACE,aAAOT,YAAY,CAACC,KAAD,EAAQC,KAAR,CAAnB;;AACF,SAAK,UAAL;AACE,aAAO;AACLJ,QAAAA,QAAQ,EAAEG,KADL;AAELF,QAAAA,aAAa,EAAEG,KAAK,CAACL,YAFhB;AAGLA,QAAAA,YAAY,EAAE;AAHT,OAAP;;AAKF,SAAK,OAAL;AACE,aAAOM,WAAW,CAACD,KAAD,CAAlB;;AACF,SAAK,OAAL;AACE,aAAON,YAAP;;AACF,SAAK,QAAL;AACE,aAAO;AACLC,QAAAA,YAAY,OAAKQ,UAAU,CAACH,KAAK,CAACL,YAAP,CAAV,GAAiC,CAAC;AAD9C,OAAP;;AAGF,SAAK,YAAL;AACE,aAAO;AACLA,QAAAA,YAAY,OAAKQ,UAAU,CAACH,KAAK,CAACL,YAAP,CAAV,GAAiC;AAD7C,OAAP;;AAGF;AACE,aAAOK,KAAP;AAtBJ;AAwBD,CAzBD;;AA2BA,eAAeM,UAAf","sourcesContent":["export const initialState = {\r\n  currentValue: \"0\",\r\n  operator: null,\r\n  previousValue: null,\r\n};\r\n\r\nexport const handleNumber = (value, state) => {\r\n  if (state.currentValue === \"0\") {\r\n    return { currentValue: `${value}` };\r\n  }\r\n\r\n  return {\r\n    currentValue: `${state.currentValue}${value}`,\r\n  };\r\n};\r\n\r\nexport const handleEqual = (state) => {\r\n  const { currentValue, previousValue, operator } = state;\r\n\r\n  const current = parseFloat(currentValue);\r\n  const previous = parseFloat(previousValue);\r\n  const resetState = {\r\n    operator: null,\r\n    previousValue: null,\r\n  };\r\n\r\n  if (operator === \"/\") {\r\n    return {\r\n      currentValue: previous / current,\r\n      ...resetState,\r\n    };\r\n  }\r\n\r\n  if (operator === \"*\") {\r\n    return {\r\n      currentValue: previous * current,\r\n      ...resetState,\r\n    };\r\n  }\r\n\r\n  if (operator === \"+\") {\r\n    return {\r\n      currentValue: previous + current,\r\n      ...resetState,\r\n    };\r\n  }\r\n\r\n  if (operator === \"-\") {\r\n    return {\r\n      currentValue: previous - current,\r\n      ...resetState,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst calculator = (type, value, state) => {\r\n  switch (type) {\r\n    case \"number\":\r\n      return handleNumber(value, state);\r\n    case \"operator\":\r\n      return {\r\n        operator: value,\r\n        previousValue: state.currentValue,\r\n        currentValue: \"0\",\r\n      };\r\n    case \"equal\":\r\n      return handleEqual(state);\r\n    case \"clear\":\r\n      return initialState;\r\n    case \"posneg\":\r\n      return {\r\n        currentValue: `${parseFloat(state.currentValue) * -1}`,\r\n      };\r\n    case \"percentage\":\r\n      return {\r\n        currentValue: `${parseFloat(state.currentValue) * 0.01}`,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default calculator;\r\n"]},"metadata":{},"sourceType":"module"}